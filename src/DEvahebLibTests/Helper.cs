using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using DEvahebLib;
using DEvahebLib.Nodes;
using DEvahebLib.Parser;
using DEvahebLib.Visitors;

namespace DEvahebLibTests
{
    internal class Helper
    {
        public static string GenerateSource(Variables variables, List<Node> nodes, SourceCodeParity parity = SourceCodeParity.BehavED)
        {
            var icarusText = new GenerateIcarusWithAliases(variables) { Parity = parity };
            icarusText.Visit(nodes);

            StringBuilder sb = new StringBuilder();

            if (parity == SourceCodeParity.BehavED)
            {
                sb.AppendLine("//Generated by BehavEd");
                sb.AppendLine();
            }

            sb.Append(icarusText.SourceCode.ToString());

            return sb.ToString();
        }

        public static List<Node> ReadIBI(string filename)
        {
            List<Node> nodes = new List<Node>();

            try
            {
                using (var file = new FileStream(filename, FileMode.Open))
                {
                    using (var reader = new BinaryReader(file))
                    {
                        var header = reader.ReadChars(4);

                        if (new string(header) != "IBI\0") // IBI string terminating
                            throw new Exception($"File {filename} is not a valid IBI file");

                        Console.WriteLine($"IBI File Version: {reader.ReadSingle()}");

                        var parser = new IBIParser();
                        while (reader != null && reader.BaseStream.Position < reader.BaseStream.Length)
                        {
                            nodes.Add(parser.ReadIBIBlock(reader));
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine();
                Console.WriteLine(ex.ToString());
            }

            return nodes;
        }

        public static void GenerateSourceFromIBI(string ibiFile, string newSourceFile, string variablesCsvFile)
        {
            GenerateSourceFromIBI(ibiFile, newSourceFile, Variables.FromCsv(variablesCsvFile));
        }

        public static void GenerateSourceFromIBI(string ibiFile, string newSourceFile, Variables variables)
        {
            var nodes = Helper.ReadIBI(ibiFile);
            File.WriteAllText(newSourceFile, Helper.GenerateSource(variables, nodes, SourceCodeParity.BehavED));
        }

        public static string GetSourceFilesDifferences(string originalFile, string newFile, bool ignoreSetTypes = false)
        {
            StringBuilder differences = new StringBuilder();

            var originalSource = File.ReadLines(originalFile).GetEnumerator();
            var newSource = File.ReadLines(newFile).GetEnumerator();

            while(originalSource.MoveNext())
            {
                // account for empty lines or comment lines
                if (string.IsNullOrWhiteSpace(originalSource.Current)
                    || originalSource.Current.TrimStart().StartsWith("rem ")
                    || originalSource.Current.TrimStart().StartsWith("rem(")
                    || originalSource.Current.TrimStart().StartsWith("//"))
                    continue;

                do
                {
                    if (!newSource.MoveNext())
                    {
                        differences.AppendLine("New source file is shorter");
                        //throw new Exception(differences.ToString());
                        return differences.ToString();
                    }
                }
                while (string.IsNullOrWhiteSpace(newSource.Current)
                    || newSource.Current.TrimStart().StartsWith("rem ")
                    || newSource.Current.TrimStart().StartsWith("rem(")
                    || newSource.Current.TrimStart().StartsWith("//"));

                bool difference = originalSource.Current != newSource.Current;

                // Sometimes we replace do() and wait() from IBI with dowait() in source,
                // but the original source has two separate statements anyway
                if (difference && newSource.Current.TrimStart().StartsWith("dowait"))
                {
                    string wait = newSource.Current.Replace("dowait (", "wait (");
                    originalSource.MoveNext();
                    //Assert.AreEqual<string>(expected: originalSource.Current, actual: wait);
                    if (originalSource.Current != wait)
                    {
                        differences.AppendLine($"Original line : {originalSource.Current}");
                        differences.AppendLine($"Generated line: {wait}");
                        return differences.ToString();
                    }
                }
                else if (difference && newSource.Current.TrimStart().StartsWith("set") && ignoreSetTypes)
                {
                    string pattern = "/\\*[^\\*]*\\*/";
                    var originalText = Regex.Replace(originalSource.Current, pattern, "");
                    var newText = Regex.Replace(originalSource.Current, pattern, "");

                    //Assert.AreEqual<string>(expected: originalText, actual: newText);
                    if (originalText != newText)
                    {
                        differences.AppendLine($"Original line : {originalSource.Current}");
                        differences.AppendLine($"Generated line: {newSource.Current}");
                        return differences.ToString();
                    }
                }
                else if (difference)
                {
                    //Assert.AreEqual<string>(expected: originalSource.Current, actual: newSource.Current);
                    differences.AppendLine($"Original line : {originalSource.Current}");
                    differences.AppendLine($"Generated line: {newSource.Current}");
                    return differences.ToString();
                }
            }

            while (newSource.MoveNext())
            {
                if (!string.IsNullOrWhiteSpace(newSource.Current))
                {
                    differences.AppendLine("New source file is longer");
                    //throw new Exception(differences.ToString());
                    return differences.ToString();
                }
            }

            return differences.ToString();
        }

        public static void GenerateSourceFromIBIAndCompareOriginal(string filenameBase, string variablesCsvFile)
        {
            var ibiFile = filenameBase + ".IBI";
            var originalSourceFile = filenameBase + ".txt";
            var outputFile = filenameBase + ".test";

            Helper.GenerateSourceFromIBI(ibiFile, outputFile, variablesCsvFile);

            Helper.GetSourceFilesDifferences(originalSourceFile, outputFile);
        }

        public static string GenerateSourceFromIBIAndCompareOriginal(string filenameBase, Variables variables)
        {
            return GenerateSourceFromIBIAndCompareOriginal(filenameBase, variables, originalExtension: ".txt", ignoreSetTypes: false);
        }

        public static string GenerateSourceFromIBIAndCompareOriginal(string filenameBase, Variables variables, string originalExtension, bool ignoreSetTypes)
        {
            var ibiFile = filenameBase + ".IBI";
            var originalSourceFile = filenameBase + originalExtension;
            var outputFile = filenameBase + ".test";

            Helper.GenerateSourceFromIBI(ibiFile, outputFile, variables);

            return Helper.GetSourceFilesDifferences(originalSourceFile, outputFile, ignoreSetTypes);
        }
    }
}
